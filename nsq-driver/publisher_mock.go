// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package nsqdriver

import (
	"sync"
)

var (
	lockPublisherMockPublish sync.RWMutex
)

// PublisherMock is a mock implementation of Publisher.
//
//     func TestSomethingThatUsesPublisher(t *testing.T) {
//
//         // make and configure a mocked Publisher
//         mockedPublisher := &PublisherMock{
//             PublishFunc: func(topic string, message interface{}) error {
// 	               panic("mock out the Publish method")
//             },
//         }
//
//         // use mockedPublisher in code that requires Publisher
//         // and then make assertions.
//
//     }
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(topic string, message interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Topic is the topic argument value.
			Topic string
			// Message is the message argument value.
			Message interface{}
		}
	}
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(topic string, message interface{}) error {
	if mock.PublishFunc == nil {
		panic("PublisherMock.PublishFunc: method is nil but Publisher.Publish was just called")
	}
	callInfo := struct {
		Topic   string
		Message interface{}
	}{
		Topic:   topic,
		Message: message,
	}
	lockPublisherMockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	lockPublisherMockPublish.Unlock()
	return mock.PublishFunc(topic, message)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	Topic   string
	Message interface{}
} {
	var calls []struct {
		Topic   string
		Message interface{}
	}
	lockPublisherMockPublish.RLock()
	calls = mock.calls.Publish
	lockPublisherMockPublish.RUnlock()
	return calls
}
